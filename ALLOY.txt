
pred show() {
        #Database = 1
        #User = 3
        #Event = 6
        #Journey = 10
        #Path = 12
}


sig Database {
        users: seq User
}


fact noDuplicateUsers {
        all d: Database | not d.users.hasDups
}




sig User {
        calendar: one Calendar,
        settings: one Settings
}


fact userMustHaveDB {
        Database.users.elems = User
}


sig Settings {
}


fact settingsMustHaveUser {
        User.settings = Settings
}


sig Calendar {
        days: seq Day
}


fact calendarMustHaveUser {
        User.calendar = Calendar
}


fact allUsersHasSeperateCalendar {
        all u1,u2: User | u1 != u2 => u1.calendar != u2.calendar
}


fact allUsersHasSeperateSettings {
        all u1,u2:  User | u1 != u2 => u1.settings != u2.settings
}


sig Day {
        events: seq Event
}{
        #events > 0
}


fact dayMustHaveCalendar {
        Calendar.days.elems = Day
}


fact everyDayBelongsToOneCalendar{
        all c1,c2: Calendar, e1: c1.days.elems, e2: c2.days.elems | c1 != c2 => e1 != e2
}


fact daysAreUniqueForACalendar {
        all c: Calendar | not c.days.hasDups
}


sig Event {
        journeys: seq Journey
}{
        #journeys > 0
}


fact eventMustHaveDay {
        Day.events.elems = Event
}


fact everyEventBelongsToOneDay{
        all d1,d2: Day, e1: d1.events.elems, e2: d2.events.elems | d1 != d2 => e1 != e2
}


fact eventsAreUniqueForADay {
        all d: Day | not d.events.hasDups
}


sig Journey {
        paths: seq Path
}
{
        #paths > 0
}


fact journeyMustHaveEvent {
        Event.journeys.elems = Journey
}


fact everyJourneyBelongsToAEvent{
        all e1,e2: Event, j1: e1.journeys.elems, j2: e2.journeys.elems | e1 != e2 => j1 != j2
}


fact journeysAreUniqueForAEvent {
        all e: Event | not e.journeys.hasDups
}


sig Path {
}


fact pathMustHaveJourney {
        Journey.paths.elems = Path
}


fact everyPathBelongsToAJourney{
        all j1,j2: Journey, p1: j1.paths.elems, p2: j2.paths.elems | j1 != j2 => p1 != p2
}


fact pathsAreUnqiueForAJourney {
        all j: Journey | not j.paths.hasDups
}


run show for 12
